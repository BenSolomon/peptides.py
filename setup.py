#!/usr/bin/env python
# coding: utf-8

import ast
import math
import os

import setuptools
from distutils.command.build import build as _build


class codegen_py(setuptools.Command):
    """A custom `setuptools` command to build data files from the RData files.
    """

    description = "build data tables"
    user_options = [
        ("force", "f", "force rebuilding the files even if they are not outdated"),
    ]

    def initialize_options(self):
        self.force = False

    def finalize_options(self):
        _build_py = self.get_finalized_command("build_py")
        self.build_lib = _build_py.build_lib

    def info(self, msg):
        self.announce(msg, level=2)

    def run(self):
        # import optional build dependencies
        try:
            import codegen
        except ImportError:
            raise RuntimeError("codegen is required to run the `codegen` command") from err
        try:
            from rpy2 import robjects
        except ImportError as err:
            raise RuntimeError("rpy2 is required to run the `codegen` command") from err

        # load data files from R-formatted data tables
        tables = self._extract_tables(robjects)

        # generate a Python file containing the constants
        with open(os.path.join("peptides", "_aadata.py"), "w") as f:
            f.write("# this file was automatically generated by `python setup.py codegen`\n")
            f.write("# do not edit manually!\n")
            for name, table in tables.items():
                stub = name.upper().replace(".", "_")
                ast_assign = ast.Assign(
                    targets=[ast.Name(id=stub, ctx=ast.Store())],
                    value=ast.Dict(
                        keys=[
                            ast.Constant(value=k)
                            for k in table.keys()
                        ],
                        values=[
                            ast.Dict(
                                keys=[
                                    ast.Constant(value=name)
                                    for name, x in zip(table[key].names, table[key])
                                    if not math.isnan(x)
                                ],
                                values=[
                                    ast.Constant(value=x)
                                    for x in table[key]
                                    if not math.isnan(x)
                                ]
                            )
                            for key in table.keys()
                        ]
                    )
                )
                f.write(codegen.to_source(ast_assign))
                f.write("\n")

    def _extract_tables(self, robjects):
        # load data files from the vendored folder
        robjects.r['load'](os.path.join("vendor", "Peptides", "data", "AAdata.RData"))
        # extract tables
        return {
            t: {
                x: robjects.r(f"AAdata${t}${x}")
                for x in robjects.r(f"AAdata${t}").names
            }
            for t in robjects.r["AAdata"].names
        }


if __name__ == "__main__":
    setuptools.setup(cmdclass=dict(codegen=codegen_py))
